/*
 * Copyright (c) 2016-present Sonatype, Inc. All rights reserved.
 * Includes the third-party code listed at http://links.sonatype.com/products/nexus/attributions.
 * "Sonatype" is a trademark of Sonatype, Inc.
 */
@Library(['private-pipeline-library', 'jenkins-shared', 'int-jenkins-shared']) _
import com.sonatype.jenkins.pipeline.GitHub
import java.text.SimpleDateFormat

String apiToken = null
withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'integrations-github-api',
    usernameVariable: 'GITHUB_API_USERNAME', passwordVariable: 'GITHUB_API_PASSWORD']]) {
  apiToken = env.GITHUB_API_PASSWORD
}

GitHub gitHub = new GitHub(this, 'jenkinsci/nexus-platform-plugin', apiToken)

node('ubuntu-zion') {
  def commitId, commitDate, pom, version, mvnReleaseCommand, mvnDeployCommand
  def releaseNotes, branch, addIQReleaseNotesLink

  try {
    stage('Preparation') {
      deleteDir()

      // Checkout and config
      checkout scm
      runSafely 'git config user.email sonatype-ci@sonatype.com'
      runSafely 'git config user.name Sonatype CI'

      // Setup common variables
      pom = readMavenPom file: 'pom.xml'
      commitId = getCommitId()
      commitDate = runSafely("git show -s --format=%cd --date=format:%Y%m%d-%H%M%S ${commitId}", true)
      version = pom.version.replace("-SNAPSHOT", ".${commitDate}.${commitId.substring(0, 7)}")
      releaseNotes = params.releaseNotes
      addIQReleaseNotesLink = params.addIQReleaseNotesLink
      branch = 'main'

      // Setup maven commands
      mvnReleaseCommand = "-Darguments=-DskipTests -DreleaseVersion=${version} -DdevelopmentVersion=${pom.version} " +
          '-DpushChanges=false -DlocalCheckout=true -DpreparationGoals=initialize clean release:prepare ' +
          'release:perform -B'
      mvnDeployCommand = '-Durl=https://repo.jenkins-ci.org/releases -DrepositoryId=maven.jenkins-ci.org ' +
          "-DgroupId=${pom.groupId} -DartifactId=${pom.artifactId} -Dversion=${version} -DgeneratePom=false " +
          'deploy:deploy-file -B'

      // Update display name
      currentBuild.displayName = "#${currentBuild.number} - ${version}"
    }
    stage('License Check') {
      licenseCheck(jenkinsMavenConfig())
    }
    stage('Build') {
      mvn jenkinsMavenConfig(), 'clean package'
    }
    stage('Nexus Lifecycle Analysis') {
      iqPolicyEvaluation(gitHub, 'release')
    }
    stage('Archive Results') {
      junit '**/target/surefire-reports/TEST-*.xml'
      archive 'target/*.hpi'
    }
  }
  finally {
    postHandler(gitHub, currentBuild, env)
  }

  if (currentBuild.result == 'FAILURE') {
    return
  }
  if (scm.branches[0].name != "*/${branch}") {
    return
  }
  stage('Update and push code') {
    // Check if want to update the change log
    if(!releaseNotes && !addIQReleaseNotesLink) {
      echo 'Skipping change log update'
      return
    }

    // Update change logs
    updateChangeLogs(releaseNotes, version, addIQReleaseNotesLink)

    // Add and commit changes
    runSafely 'git add README.md'
    runSafely "git commit -m 'Updating change logs for release ${version}'"

    // Push changes
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'integrations-github-api',
        usernameVariable: 'GITHUB_API_USERNAME', passwordVariable: 'GITHUB_API_PASSWORD']]) {
      // Setup remote url with credentials
      runSafely "git remote set-url origin https://${env.GITHUB_API_USERNAME}:${env.GITHUB_API_PASSWORD}@github" +
                                                  '.com/jenkinsci/nexus-platform-plugin.git'

      // Get latest commits to not have issues on push
      runSafely "git pull --no-rebase --no-edit origin ${branch}"

      // Push code changes
      runSafely "git push origin HEAD:${branch}"
    }
  }
  stage('Deploy to Sonatype') {
    withGpgCredentials('gnupg') {
      mvn sonatypeMavenConfig(), mvnReleaseCommand
    }
  }
  stage('Push tags') {
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'integrations-github-api',
                      usernameVariable: 'GITHUB_API_USERNAME', passwordVariable: 'GITHUB_API_PASSWORD']]) {
      runSafely "git push https://${env.GITHUB_API_USERNAME}:${env.GITHUB_API_PASSWORD}@github" +
          ".com/jenkinsci/nexus-platform-plugin.git ${pom.artifactId}-${version}"
    }
  }
  stage('Deploy to Jenkins.io') {
    mvn jenkinsMavenConfig(), '-Dfile=target/checkout/target/nexus-jenkins-plugin.hpi ' +
        "-DpomFile=target/checkout/pom.xml ${mvnDeployCommand}"
    mvn jenkinsMavenConfig(), '-Dfile=target/checkout/target/nexus-jenkins-plugin.jar ' +
        "-Dsources=target/checkout/target/nexus-jenkins-plugin-sources.jar ${mvnDeployCommand}"
  }
  stage('Check plugin deployment') {
    checkPublishedPlugin(version)
  }
}

String getCommitId() {
  return runSafely ('git rev-parse HEAD', true)
}

Map jenkinsMavenConfig() {
  def common = mavenCommon([mavenStandardOptions: ''])
  common.settingsFile = 'jenkins-settings.xml'
  common.mavenVersion = 'Maven 3.6.x'
  return common
}

Map sonatypeMavenConfig() {
  def common = mavenCommon([usePublicSettingsXmlFile: true, mavenProfiles: ['sonatype'], mavenStandardOptions: ''])
  common.mavenVersion = 'Maven 3.6.x'
  return common
}

void postHandler(gitHub, currentBuild, env) {
  def commitId = getCommitId()
  if (currentBuild.currentResult == 'SUCCESS') {
    gitHub.statusUpdate commitId, 'success', 'CI', 'CI Passed'
  }
  else {
    gitHub.statusUpdate commitId, 'failure', 'CI', 'CI Failed'
  }
}

void iqPolicyEvaluation(gitHub, stage) {
  def commitId = getCommitId()
  gitHub.statusUpdate commitId, 'pending', 'analysis', 'Nexus Lifecycle Analysis in running'

  try {
    def evaluation = nexusPolicyEvaluation failBuildOnNetworkError: false, iqApplication: 'nexus-platform-plugin',
        iqScanPatterns: [[scanPattern: 'scan_nothing']], iqStage: stage, jobCredentialsId: ''
    gitHub.statusUpdate commitId, 'success', 'analysis', 'Nexus Lifecycle Analysis passed',
        "${evaluation.applicationCompositionReportUrl}"
  }
  catch (error) {
    def evaluation = error.policyEvaluation
    gitHub.statusUpdate commitId, 'failure', 'analysis', 'Nexus Lifecycle Analysis failed',
        "${evaluation.applicationCompositionReportUrl}"
    throw error
  }
}

void updateChangeLogs(releaseNotes, version, addIQReleaseNotesLink) {
  def newDate = getFormattedCommitDate()
  updateReleaseNotes(
      header: 'Changelog\n=========',
      version: "${version} (${newDate})",
      separator: '------------------------------------------------',
      releaseNotes: releaseNotes,
      filePath: 'README.md',
      addIQReleaseNotesLink: addIQReleaseNotesLink
  )
}

String getFormattedCommitDate() {
  commitDate = runSafely("git show -s --format=%cd --date=format:%Y-%m-%d ${commitId}", true)
  date = new SimpleDateFormat('yyyy-MM-dd').parse(commitDate)
  return new SimpleDateFormat('MMMM dd, yyyy').format(date)
}

void checkPublishedPlugin(version) {
  try {
    def url = "https://repo.jenkins-ci.org/artifactory/releases/org/sonatype/nexus/ci/nexus-jenkins-plugin/${version}/"
    def response = httpRequest url

    if(response.status != 200) {
      error "Error checking published plugin artifacts. URL: ${url} Response: ${response.status}"
    }

    def hasHpi = response.content.contains("${version}.hpi")
    def hasJar = response.content.contains("${version}.jar")
    def hasPom = response.content.contains("${version}.pom")
    def hasSources = response.content.contains("${version}-sources.jar")

    if(!hasHpi || !hasJar || !hasPom || !hasSources) {
      error 'Plugin artifacts not found.'
    }
  }
  catch (exception) {
    echo "Error: ${exception.message}"
    error 'Error checking published plugin artifacts.'
  }
}
